{"version":3,"sources":["index.js"],"names":["people","graphs","nodes","id","label","title","edges","from","to","dashes","color","smooth","width","fast_physics","enabled","barnesHut","gravitationalConstant","centralGravity","springLength","springConstant","damping","avoidOverlap","maxVelocity","minVelocity","solver","stabilization","iterations","updateInterval","onlyDynamicEdges","fit","timestep","adaptiveTimestep","slow_physics","options","height","layout","randomSeed","manipulation","initiallyActive","interaction","navigationButtons","shadow","type","roundness","physics","events","select","event","console","log","MultiGraph","props","current_graph","this","length","view_position","Network","getViewPosition","view_scale","getScale","setOptions","positions","getPositions","setData","Object","entries","key","value","moveNode","x","y","moveTo","position","scale","setTimeout","bind","className","onClick","Graph","rootElement","document","getElementById","ReactDOM","render","graph","getNetwork","network"],"mappings":"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","file":"static/js/main.7b92849d.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Graph from \"react-graph-vis\";\n\nconst people = [\"John\", \"James\", \"Jane\", \"Janet\", \"Jason\"];\n\nconst graphs = [\n  {\n    nodes: [\n      { id: people[0], label: people[0], title: \"{people[0]} tootip text\" },\n      { id: people[1], label: people[1], title: \"node 2 tootip text\" },\n      { id: people[2], label: people[2], title: \"node 3 tootip text\" },\n      { id: people[3], label: people[3], title: \"node 4 tootip text\" },\n      { id: people[4], label: people[4], title: \"node 5 tootip text\" }\n    ],\n    edges: [\n      { from: people[0], to: people[1] },\n      { from: people[1], to: people[2] },\n      { from: people[2], to: people[3] },\n      { from: people[3], to: people[4] }\n    ]\n  },\n  {\n    nodes: [\n      { id: people[0], label: people[0], title: \"node 1 tootip text\" },\n      { id: people[1], label: people[1], title: \"node 2 tootip text\" },\n      { id: people[2], label: people[2], title: \"node 2 tootip text\" },\n      { id: people[3], label: people[3], title: \"node 2 tootip text\" },\n      { id: people[4], label: people[4], title: \"node 2 tootip text\" },\n    ],\n    edges: [\n      { from: people[0], to: people[3] },\n      { from: people[2], to: people[4] },\n      { from: people[1], to: people[2] }\n    ]\n  },\n  {\n    nodes: [\n      { id: people[0], label: people[0], title: \"node 1 tootip text\" },\n      { id: people[1], label: people[1], title: \"node 1 tootip text\" },\n      { id: people[2], label: people[2], title: \"node 1 tootip text\" },\n      { id: people[3], label: people[3], title: \"node 1 tootip text\" },\n      { id: people[4], label: people[4], title: \"node 1 tootip text\" },\n    ],\n    edges: [\n      { from: people[0], to: people[3], dashes: true, color: \"red\", smooth: {\"type\": \"curvedCW\"}},\n      { from: people[3], to: people[0], width: 4.0, color: \"blue\", smooth: {\"type\": \"curvedCW\"}},\n      { from: people[0], to: people[4], dashes: true, color: \"red\" },\n      { from: people[1], to: people[2] }\n    ]\n  }\n];\n\nconst fast_physics = {\n  enabled: true,\n  barnesHut: {\n    gravitationalConstant: -50,\n    centralGravity: 0.0,\n    springLength: 50,\n    springConstant: 0.02,\n    damping: 0.2,\n    avoidOverlap: 0.5\n  },\n  maxVelocity: 30,\n  minVelocity: 0.2,\n  solver: 'barnesHut',\n  stabilization: {\n    enabled: true,\n    iterations: 100,\n    updateInterval: 10,\n    onlyDynamicEdges: false,\n    fit: true\n  },\n  timestep: 0.5,\n  adaptiveTimestep: true\n};\n\nconst slow_physics = {...fast_physics};\nslow_physics.timestep = 0.1;\n\nconst options = {\n  height: \"500px\",\n  width: \"100%\",\n  layout:{\n    randomSeed: 42,\n  },\n  manipulation:{\n    enabled: true,\n    initiallyActive: true,\n  },\n  interaction:{\n    navigationButtons: true,\n  },\n  edges:{\n    shadow: true,\n    smooth: {\n      enabled: true,\n      type: \"continuous\",\n      roundness: 0.3,\n    },\n    width: 0.5,\n  },\n  physics: fast_physics,\n};\n\nconst events = {\n  select: function(event) {\n    var { nodes, edges } = event;\n    console.log(nodes);\n    console.log(edges);\n  }\n};\n\nclass MultiGraph extends Graph {\n  constructor(props) {\n    super(props);\n    this.graphs = props.graphs;\n    this.current_graph = 0;\n  }\n\n  onClick(){\n    let current_graph = this.current_graph;\n    let graphs = this.graphs;\n\n    current_graph += 1;\n\n    if (current_graph > graphs.length-1)\n    {\n      current_graph = 0;\n    }\n\n    const view_position = this.Network.getViewPosition();\n    const view_scale = this.Network.getScale();\n\n    this.Network.setOptions( { physics: false } );\n\n    let positions = this.Network.getPositions();\n\n    this.Network.setData(graphs[current_graph]);\n\n    for (const [key, value] of Object.entries(positions))\n    {\n      this.Network.moveNode(key, value.x, value.y);\n    }\n\n    this.Network.moveTo({position:view_position, scale:view_scale});\n\n    setTimeout(function()\n               {\n                   this.Network.setOptions({physics: slow_physics})\n               }.bind(this), 100 );\n\n    setTimeout(function()\n               {\n                 this.Network.setOptions({physics: fast_physics})\n               }.bind(this), 350 );\n\n    this.current_graph = current_graph;\n }\n\n  render(){\n    return (<div>\n              <button className='graph-buttton'\n                      onClick={() => {this.onClick()}}>\n                Click Me!\n              </button>\n              {super.render()}\n            </div>);\n  }\n};\n\nfunction App() {\n\n  return (\n      <MultiGraph\n        graph={graphs[0]}\n        graphs={graphs}\n        options={options}\n        events={events}\n        getNetwork={network => {\n          //  if you want access to vis.js network api you\n          //  can set the state in a parent component using\n          //  this property\n        }}\n      />\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\n"],"sourceRoot":""}