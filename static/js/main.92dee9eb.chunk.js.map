{"version":3,"sources":["index.js"],"names":["people","graphs","nodes","id","label","title","edges","from","to","dashes","color","smooth","width","options","height","shadow","enabled","type","roundness","physics","barnesHut","gravitationalConstant","centralGravity","springLength","springConstant","damping","avoidOverlap","maxVelocity","minVelocity","solver","stabilization","iterations","updateInterval","onlyDynamicEdges","fit","timestep","adaptiveTimestep","events","select","event","console","log","MultiGraph","props","current_graph","this","length","Network","getPositions","setData","className","onClick","Graph","rootElement","document","getElementById","ReactDOM","render","graph","getNetwork","network"],"mappings":"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","file":"static/js/main.92dee9eb.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Graph from \"react-graph-vis\";\n\nconst people = [\"John\", \"James\", \"Jane\", \"Janet\", \"Jason\"];\n\nconst graphs = [\n  {\n    nodes: [\n      { id: people[0], label: people[0], title: \"{people[0]} tootip text\" },\n      { id: people[1], label: people[1], title: \"node 2 tootip text\" },\n      { id: people[2], label: people[2], title: \"node 3 tootip text\" },\n      { id: people[3], label: people[3], title: \"node 4 tootip text\" },\n      { id: people[4], label: people[4], title: \"node 5 tootip text\" }\n    ],\n    edges: [\n      { from: people[0], to: people[1] },\n      { from: people[1], to: people[2] },\n      { from: people[2], to: people[3] },\n      { from: people[3], to: people[4] }\n    ]\n  },\n  {\n    nodes: [\n      { id: people[0], label: people[0], title: \"node 1 tootip text\" },\n      { id: people[1], label: people[1], title: \"node 2 tootip text\" },\n      { id: people[2], label: people[2], title: \"node 2 tootip text\" },\n      { id: people[3], label: people[3], title: \"node 2 tootip text\" },\n      { id: people[4], label: people[4], title: \"node 2 tootip text\" },\n    ],\n    edges: [\n      { from: people[0], to: people[3] },\n      { from: people[2], to: people[4] },\n      { from: people[1], to: people[2] }\n    ]\n  },\n  {\n    nodes: [\n      { id: people[0], label: people[0], title: \"node 1 tootip text\" },\n      { id: people[1], label: people[1], title: \"node 1 tootip text\" },\n      { id: people[2], label: people[2], title: \"node 1 tootip text\" },\n      { id: people[3], label: people[3], title: \"node 1 tootip text\" },\n      { id: people[4], label: people[4], title: \"node 1 tootip text\" },\n    ],\n    edges: [\n      { from: people[0], to: people[3], dashes: true, color: \"red\", smooth: {\"type\": \"curvedCW\"}},\n      { from: people[3], to: people[0], width: 4.0, color: \"blue\", smooth: {\"type\": \"curvedCW\"}},\n      { from: people[0], to: people[4], dashes: true, color: \"red\" },\n      { from: people[1], to: people[2] }\n    ]\n  }\n];\n\nconst options = {\n  height: \"500px\",\n  width: \"100%\",\n  edges:{\n    shadow: true,\n    smooth: {\n      enabled: true,\n      type: \"continuous\",\n      roundness: 0.3,\n    },\n    width: 0.5,\n  },\n  physics:{\n    enabled: true,\n    barnesHut: {\n      gravitationalConstant: -100,\n      centralGravity: 0.0,\n      springLength: 95,\n      springConstant: 0.04,\n      damping: 0.09,\n      avoidOverlap: 0.3\n    },\n    maxVelocity: 50,\n    minVelocity: 0.1,\n    solver: 'barnesHut',\n    stabilization: {\n      enabled: true,\n      iterations: 1000,\n      updateInterval: 100,\n      onlyDynamicEdges: false,\n      fit: true\n    },\n    timestep: 0.5,\n    adaptiveTimestep: true\n  }\n};\n\nconst events = {\n  select: function(event) {\n    var { nodes, edges } = event;\n    console.log(nodes);\n    console.log(edges);\n  }\n};\n\nclass MultiGraph extends Graph {\n  constructor(props) {\n    super(props);\n    this.graphs = props.graphs;\n    this.current_graph = 0;\n  }\n\n  onClick(){\n    let current_graph = this.current_graph;\n    let graphs = this.graphs;\n\n    current_graph += 1;\n\n    if (current_graph > graphs.length-1)\n    {\n      current_graph = 0;\n    }\n\n    console.log(this.Network.getPositions());\n\n    this.Network.setData(graphs[current_graph]);\n    this.current_graph = current_graph;\n  }\n\n  render(){\n    return (<div>\n              <button className='graph-buttton'\n                      onClick={() => {this.onClick()}}>\n                Click Me!\n              </button>\n              {super.render()}\n            </div>);\n  }\n};\n\nfunction App() {\n\n  return (\n      <MultiGraph\n        graph={graphs[0]}\n        graphs={graphs}\n        options={options}\n        events={events}\n        getNetwork={network => {\n          //  if you want access to vis.js network api you\n          //  can set the state in a parent component using\n          //  this property\n        }}\n      />\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\n"],"sourceRoot":""}